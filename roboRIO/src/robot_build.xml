<?xml version="1.0" encoding="UTF-8"?>

<!--
/*
 * Copyright 2014-2015 Colby Skeggs
 * 
 * This file is part of the CCRE, the Common Chicken Runtime Engine.
 * 
 * The CCRE is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 * 
 * The CCRE is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with the CCRE.  If not, see <http://www.gnu.org/licenses/>.
 */
 -->

<project name="CCRE Build">

	<!-- ccre-nonroot.dir and project.dir are set by the launch configuration, as generated by rebuild-builders.xml -->
	<fail unless="ccre-nonroot.dir" message="ccre-nonroot.dir must be set! This is a bug; please report it." />
	<fail unless="project.dir" message="project.dir must be set! This is a bug; please report it." />

	<property name="ccre-root.dir" location="${ccre-nonroot.dir}/.." />
	<property name="src.dir" value="${project.dir}/src" />
	<property name="build.dir" value="${project.dir}/build" />
	<property name="dist.dir" value="${project.dir}/dist" />

	<!-- Load Tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${ccre-root.dir}/roboRIO/src/edu/wpi/first/wpilibj/binaries/ant-contrib.jar" />
		</classpath>
	</taskdef>
	<taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="${ccre-root.dir}/roboRIO/src/edu/wpi/first/wpilibj/binaries/ant-classloadertask.jar" />
	<classloader loader="system" classpath="${ccre-root.dir}/roboRIO/src/edu/wpi/first/wpilibj/binaries/jsch-0.1.50.jar" />

	<property file="${user.home}/wpilib/wpilib.properties" />
	<property file="${project.dir}/build.properties" />
	<property file="${user.home}/wpilib/java/${version}/ant/build.properties" />
	<property file="${src.dir}/main.properties" />
	<property file="wpilib-build.properties" />

	<fail unless="team-number" message="team-number should be set by main.properties!" />
	<fail unless="frc.main" message="frc.main should be set by main.properties!" />

	<property name="emulate.jar" value="${dist.dir}/EmulationTarget.jar" />
	<property name="emulator.jar" value="${ccre-root.dir}/Emulator/Emulator.jar" />
	<property name="classpath" value="${ccre-root.dir}/roboRIO/roboRIO.jar" />

	<target name="compile" description="Compile the source code.">
		<mkdir dir="${build.dir}" />
		<echo>[athena-compile] Compiling ${src.dir} with classpath=${classpath} to ${build.dir} with version ${ant.java.version}</echo>

		<javac srcdir="${src.dir}" destdir="${build.dir}" includeAntRuntime="no" includeJavaRuntime="no" classpath="${classpath}" target="${ant.java.version}" source="${ant.java.version}" compiler="javac${ant.java.version}" debug="true">
		</javac>
	</target>

	<target name="jar" depends="compile">
		<echo>[athena-jar] Making jar ${dist.jar}.</echo>
		<mkdir dir="${dist.dir}" />
		<mkdir dir="${build.jars}" />

		<echo>[athena-jar] Copying jars from ${classpath} to ${build.jars}.</echo>
		<copy todir="${build.jars}" flatten="true">
			<path>
				<pathelement path="${classpath}" />
			</path>
		</copy>

		<property name="boot-class" value="edu.wpi.first.wpilibj.RobotBase" />

		<jar destfile="${dist.jar}" update="false">
			<manifest>
				<attribute name="Main-Class" value="${boot-class}" />
				<attribute name="Robot-Class" value="ccre.frc.DirectFRCImplementation" />
				<attribute name="CCRE-Main" value="${frc.main}" />
				<attribute name="Class-Path" value="." />
			</manifest>

			<fileset dir="${build.dir}" includes="**/*.class" />

			<zipgroupfileset dir="${build.jars}">
				<include name="**/*.jar" />
			</zipgroupfileset>
		</jar>

		<jar destfile="${emulate.jar}" update="false">
			<manifest>
				<attribute name="FRC-Main" value="${frc.main}" />
			</manifest>

			<fileset dir="${build.dir}" includes="**/*.class" />
		</jar>
	</target>

	<target name="fetch-logs" depends="get-target-ip">
		<tempfile property="log.dir" destdir="${project.dir}" prefix="roboRIO-logs-" />

		<basename file="${log.dir}" property="log.file" />

		<sshexec host="${target}" username="${username}" password="${password}" trust="true" outputproperty="log.exists" command="echo ccre-storage/log-*" />

		<condition property="should-fetch-logs" value="set">
			<not>
				<equals trim="true" arg1="${log.exists}" arg2="ccre-storage/log-*" />
			</not>
		</condition>

		<antcall target="fetch-logs-real" />
	</target>

	<target name="fetch-logs-real" if="should-fetch-logs">
		<echo>[ccre-log-fetch] Packaging old logs: ${log.dir}: ${should-fetch-logs}: ${log.exists}</echo>
		<sshexec host="${target}" username="${username}" password="${password}" trust="true" failonerror="true" command="tar -czf logs-${log.file}.tgz ccre-storage/log-* &amp;&amp; mkdir /tmp/${log.file}/ &amp;&amp; mv ccre-storage/log-* /tmp/${log.file}/" />

		<echo>[ccre-log-fetch] Retrieving old logs...</echo>

		<scp file="${username}@${target}:logs-${log.file}.tgz" todir="${project.dir}" password="${password}" failonerror="true" trust="true" />

		<echo>[ccre-log-fetch] Removing old logs...</echo>

		<sshexec host="${target}" username="${username}" password="${password}" trust="true" command="rm logs-${log.file}.tgz" failonerror="true" />
	</target>

	<target name="deploy" depends="clean,jar,get-target-ip,dependencies,fetch-logs" description="Deploy the jar and start the program running.">
		<echo>[athena-deploy] Deploying CCRE-based code.</echo>
		<scp file="${dist.jar}" todir="${username}@${target}:${deploy.dir}" password="${password}" trust="true" />

		<sshexec host="${target}" username="admin" password="${password}" trust="true" failonerror="false" command="killall netconsole-host" />
		<scp file="${ccre-root.dir}/roboRIO/src/edu/wpi/first/wpilibj/binaries/netconsole-host" todir="admin@${target}:/usr/local/frc/bin" password="${password}" trust="true" />

		<scp file="${ccre-root.dir}/roboRIO/src/edu/wpi/first/wpilibj/binaries/robotCommand" todir="${username}@${target}:${command.dir}" password="${password}" trust="true" />

		<echo>[athena-deploy] Starting program.</echo>
		<sshexec host="${target}" username="${username}" password="${password}" trust="true" command="${deploy.kill.command};" />
	</target>

	<target name="debug-deploy" depends="jar,get-target-ip,dependencies,fetch-logs" description="Deploy the jar and start the program debugging.">
		<echo>[athena-deploy] Deploying CCRE-based code.</echo>
		<scp file="${dist.jar}" todir="${username}@${target}:${deploy.dir}" password="${password}" trust="true" />
		<!-- The remoteDebugCommand file is used by /usr/local/frc/bin/frcRunRobot.sh on the roboRIO  -->
		<scp file="${ccre-root.dir}/roboRIO/src/edu/wpi/first/wpilibj/binaries/robotDebugCommand" todir="${username}@${target}:${command.dir}" password="${password}" trust="true" />
		<!-- The frcdebug file is used as a flag for /usr/local/frc/bin/frcRunRobot.sh to run the robot program in debug mode -->
		<scp file="${ccre-root.dir}/roboRIO/src/edu/wpi/first/wpilibj/binaries/frcdebug" todir="${username}@${target}:${debug.flag.dir}" password="${password}" trust="true" />
		<sshexec host="${target}" username="${username}" password="${password}" trust="true" command="${debug.flag.command}" />

		<echo>[athena-deploy] Starting Debug program.</echo>
		<sshexec host="${target}" username="${username}" password="${password}" trust="true" command="${deploy.kill.command}" />
	</target>

	<target name="emulate" depends="jar">
		<mkdir dir="${project.dir}/emulation-roborio" />
		<java jar="${ccre-root.dir}/Emulator/Emulator.jar" fork="true" dir="${project.dir}/emulation-roborio">
			<!-- <jvmarg value="-Xdebug" />
			<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=51540" /> -->
			<arg value="${emulate.jar}" />
			<arg value="roboRIO" />
			<classpath>
				<zipfileset file="${emulator.jar}" />
			</classpath>
		</java>
	</target>

	<target name="quick-deploy-begin" depends="clean,jar">
		<property name="target" value="roboRIO-${team-number}.local" />
		<script language="javascript">
			<![CDATA[
			if (javax.swing.JOptionPane.showConfirmDialog(null, "Press OK when ready to connect to roboRIO...", "QuickDeploy", javax.swing.JOptionPane.OK_CANCEL_OPTION) != javax.swing.JOptionPane.OK_OPTION) {
			    var fail = project.createTask("fail");
				fail.setMessage("Cancelled by user.");
				fail.perform();
			}
			var target = project.getProperty("target");
			function check() {
				try {
					var addr = java.net.InetAddress.getByName(target);
					return true;
				} catch (e) {
					return false;
				}
			}
			var tries = 0;
			while (!check()) {
				if (++tries >= 1000) {
					var fail = project.createTask("fail");
					fail.setMessage("Could not find roboRIO.");
					fail.perform();
				}
			}
			var fail = project.createTask("echo");
			fail.setMessage("roboRIO detected. Continuing...");
			fail.perform();
			]]>
		</script>
	</target>

	<target name="quick-deploy" depends="quick-deploy-begin,get-target-ip,dependencies,fetch-logs">
		<echo>[athena-deploy] Deploying CCRE-based code.</echo>
		<scp file="${dist.jar}" todir="${username}@${target}:${deploy.dir}" password="${password}" trust="true" />

		<script language="javascript">
			<![CDATA[
			if (javax.swing.JOptionPane.showConfirmDialog(null, "Press OK when ready to activate code...", "QuickDeploy", javax.swing.JOptionPane.OK_CANCEL_OPTION) != javax.swing.JOptionPane.OK_OPTION) {
			    var fail = project.createTask("fail");
				fail.setMessage("Cancelled by user.");
				fail.perform();
			}
			]]>
		</script>
		<sshexec host="${target}" username="admin" password="${password}" trust="true" failonerror="false" command="killall netconsole-host" />
		<scp file="${ccre-root.dir}/roboRIO/src/edu/wpi/first/wpilibj/binaries/netconsole-host" todir="admin@${target}:/usr/local/frc/bin" password="${password}" trust="true" />

		<scp file="${ccre-root.dir}/roboRIO/src/edu/wpi/first/wpilibj/binaries/robotCommand" todir="${username}@${target}:${command.dir}" password="${password}" trust="true" />

		<echo>[athena-deploy] Starting program.</echo>
		<sshexec host="${target}" username="${username}" password="${password}" trust="true" command="${deploy.kill.command};" />
	</target>

	<target name="clean" description="Clean up all build and distribution artifacts.">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<target name="get-target-ip">
		<property name="target" value="roboRIO-${team-number}.local" />
		<echo>Trying Target: ${target}</echo>
		<if>
			<isreachable host="${target}" timeout="5" />
			<then>
				<echo>roboRIO found via mDNS</echo>
			</then>
			<else>
				<var name="target" unset="true" />
				<echo> roboRIO not found via mDNS, falling back to static USB</echo>
				<property name="target" value="172.22.11.2" />
				<if>
					<isreachable host="${target}" timeout="5" />
					<then>
						<echo>roboRIO found via static USB</echo>
					</then>
					<else>
						<var name="target" unset="true" />
						<math result="ip.upper" operand1="${team-number}" operation="/" operand2="100" datatype="int" />
						<math result="ip.lower" operand1="${team-number}" operation="%" operand2="100" datatype="int" />
						<property name="target" value="10.${ip.upper}.${ip.lower}.2" />
						<echo>roboRIO not found via USB, falling back to static address of ${target}</echo>
						<if>
							<isreachable host="${target}" timeout="5" />
							<then>
								<echo>roboRIO found via Ethernet static</echo>
							</then>
							<else>
								<fail message="roboRIO not found; please check that the roboRIO is connected and imaged." />
							</else>
						</if>
					</else>
				</if>
			</else>
		</if>
	</target>

	<target name="dependencies" depends="get-target-ip">
		<post to="http://${target}/nisysapi/server" logfile="sysProps.xml" verbose="false" encoding="UTF-16LE" append="false">
			<prop name="Function" value="GetPropertiesOfItem" />
			<prop name="Plugins" value="nisyscfg" />
			<prop name="Items" value="system" />
		</post>
		<!-- If sysProps.xml doesn't seem to exist... you probably aren't pointing at a roboRIO. -->
		<loadfile srcFile="sysProps.xml" encoding="UTF-16LE" property="roboRIOSysValues" />
		<propertyregex property="roboRIOImage" input="${roboRIOSysValues}" regexp="FRC_roboRIO_2015_v([0-9]+)" select="\1" defaultValue="ImageRegExFail" />
		<if>
			<contains string="${roboRIOAllowedImages}" substring="${roboRIOImage}" />
			<then>
				<echo>roboRIO found via Ethernet static</echo>
			</then>
			<else>
				<fail message="roboRIO Image does not match plugin, allowed image version: ${roboRIOAllowedImages}" />
			</else>
		</if>
		<echo>roboRIO image version validated</echo>
		<echo>Checking for JRE. If this fails install the JRE using these instructions: https://wpilib.screenstepslive.com/s/4485/m/13503/l/288822-installing-java-8-on-the-roborio-using-the-frc-roborio-java-installer-java-only</echo>
		<sshexec host="${target}" username="${username}" password="${password}" trust="true" failonerror="true" command="test -d ${roboRIOJRE.dir}" />
	</target>
</project>
