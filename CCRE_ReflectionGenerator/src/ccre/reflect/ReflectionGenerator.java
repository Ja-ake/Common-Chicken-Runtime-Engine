/*
 * Copyright 2014 Colby Skeggs
 * 
 * This file is part of the CCRE, the Common Chicken Runtime Engine.
 * 
 * The CCRE is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 * 
 * The CCRE is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with the CCRE.  If not, see <http://www.gnu.org/licenses/>.
 */
package ccre.reflect;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

/**
 * A generator to calculate reflection classes for the specified class files.
 *
 * @author skeggsc
 */
public class ReflectionGenerator {

    public static void main(String[] args) throws IOException {
        HashMap<String, DecClass> classes = new HashMap<String, DecClass>();
        boolean no_generics = false, include_all = false;
        for (String arg : args) {
            if (arg.equals("-no-generics")) {
                no_generics = true;
                continue;
            } else if (arg.equals("-include-all")) {
                include_all = true;
                continue;
            } else if (arg.equals("-no-include-all")) {
                include_all = false;
                continue;
            }
            if (arg.contains("${sunspot.home}")) {
                arg = arg.replace("${sunspot.home}", System.getProperty("sunspot.home"));
            }
            for (String part : arg.split(System.getProperty("path.separator"))) {
                File f = new File(part);
                handle(f, classes, include_all);
            }
        }
        PrintStream out = new PrintStream(new File("ReflectionEngineImpl.java"));
        ArrayList<String> astr = new ArrayList<String>();
        out.println("// THIS FILE IS AUTOGENERATED. DO NOT EDIT.");
        out.println("package ccre.reflect;");
        out.println("public final class ReflectionEngineImpl extends ReflectionEngine {");
        out.println("\tpublic Object dispatch(int uid, Object self, Object[] args) throws Throwable {");
        out.println("\t\tswitch (uid) {");
        for (DecClass c : classes.values()) {
            c.process(out, classes, astr);
        }
        out.println("\t\t\tdefault: throw new IllegalArgumentException(\"Invalid UID: \" + uid);");
        out.println("\t\t}");
        out.println("\t}");
        out.println(no_generics ? "\tprotected void complete(ccre.util.CHashMap map) {" : "\tprotected void complete(ccre.util.CHashMap<String, Integer> map) {");
        for (int i = 0; i < astr.size(); i++) {
            out.println("\t\tmap.put(\"" + astr.get(i) + "\", Integer.valueOf(" + i + "));");
        }
        out.println("\t}");
        out.println("\tpublic String getSuperclass(String name) {");
        for (DecClass c : classes.values()) {
            if (c.superclassname != null && !c.superclassname.equals("java/util/ListResourceBundle") && !DecClass.isNameFiltered(c.superclassname) && !(DecClass.isNameFiltered(c.name) && (c.superclassname.equals("java/lang/Object") || c.superclassname.equals("java/lang/Enum")))) {
                out.println("\t\tif (\"" + c.name.replace('/', '.') + "\".equals(name)) { return \"" + c.superclassname.replace('/', '.') + "\"; }");
            }
        }
        out.println("\t\treturn null;");
        out.println("\t}");
        out.println("}");
    }

    public static void handle(File f, Map<String, DecClass> classes, boolean include_all) throws IOException {
        if (!f.exists()) {
            if (f.getName().endsWith("sunrsasign.jar") || f.getPath().endsWith("jre\\classes")) {
                return;
            }
            throw new IOException("File does not exist: " + f);
        }
        if (f.isDirectory()) {
            for (File sf : f.listFiles()) {
                handle(sf, classes, include_all);
            }
        } else if (f.isFile() && f.getName().endsWith(".class")) {
            DecClass c = new DecClass(include_all);
            c.loadclass(new DataInputStream(new FileInputStream(f)));
            if (classes.containsKey(c.name)) {
                throw new IOException("Duplicate: " + c.name);
            }
            classes.put(c.name, c);
        } else if (f.isFile() && f.getName().endsWith(".jar") && (include_all || !f.getName().matches(".*(resources|jsse|jce|charsets|jfr)[.]jar"))) {
            JarFile jf = new JarFile(f);
            System.out.println(f);
            ArrayList<JarEntry> ents = Collections.list(jf.entries());
            int count = 0, real = 0;
            for (JarEntry ent : ents) {
                if (++count % 10000 == 0) {
                    System.out.println("Processed: " + count + "/" + ents.size() + ": " + real);
                }
                if (ent.getName().endsWith(".class") && (ent.getName().startsWith("java/") || include_all)) {
                    real++;
                    DecClass c = new DecClass(include_all);
                    c.loadclass(new DataInputStream(jf.getInputStream(ent)));
                    if (classes.containsKey(c.name)) {
                        throw new IOException("Duplicate: " + c.name);
                    }
                    classes.put(c.name, c);
                }
            }
            System.out.println("Processed: " + count + "/" + ents.size() + ": " + real);
            System.out.println("Loaded: " + f);
        }
    }
}
